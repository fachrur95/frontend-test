import Head from "next/head";
import type { MyPage } from "@/components/layouts/layoutTypes";
import { useInView } from "react-intersection-observer";
import React, { useEffect, useRef, useState } from "react";
import { useRouter } from "next/router";
import { api } from "@/utils/api";
import { useAppStore } from "@/utils/store";
import type { PaginationResponse } from "@/types/api-response";
import type { ITodo } from "@/types/prisma-api/todo";
import useNotification from "@/components/hooks/useNotification";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemText from "@mui/material/ListItemText";
import Paper from "@mui/material/Paper";
import Slide from "@mui/material/Slide";
import Checkbox from "@mui/material/Checkbox";
import Divider from "@mui/material/Divider";
import IconButton from "@mui/material/IconButton";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
import ButtonFloat from "@/components/controls/ButtonFloat";
import ConfirmationDialog from "@/components/dialogs/ConfirmationDialog";
import ModalTransition from "@/components/dialogs/ModalTransition";
import TodoForm from "@/components/forms/TodoForm";
import type { FormSlugType } from "@/types/global";
import Delete from "@mui/icons-material/Delete";
import ClearAll from "@mui/icons-material/ClearAll";
import ListItemIcon from "@mui/material/ListItemIcon";
import DeleteMultiple from "@/components/displays/DeleteMultiple";
import UpdateMultiple from "@/components/displays/UpdateMultiple";
import { convertDateOnly } from "@/utils/helpers";
import InputLabel from "@mui/material/InputLabel";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import Select, { type SelectChangeEvent } from "@mui/material/Select";
import SearchInput from "@/components/controls/SearchInput";

const pathname = "/";

type SortByType = "title" | "description" | "entryDate" | "isCompleted";

const Home: MyPage = () => {
  const router = useRouter();
  const { ref, inView } = useInView();
  const [checked, setChecked] = useState<string[]>([]);
  const [rows, setRows] = useState<ITodo[]>([]);
  const [countAll, setCountAll] = useState<number>(0);
  const containerRef = useRef(null);
  const [selectedId, setSelectedId] = useState<string | null>(null);
  const { search } = useAppStore();
  const { setOpenNotification } = useNotification();
  const [sortBy, setSortBy] = useState<SortByType>("entryDate");

  const handleChangeSortBy = (event: SelectChangeEvent) => {
    setSortBy(event.target.value as SortByType);
  };
  const { data, fetchNextPage, isFetchingNextPage, hasNextPage, refetch } =
    api.todo.findAll.useInfiniteQuery(
      {
        limit: 10,
        search,
        sortBy,
      },
      {
        getNextPageParam: (lastPage: PaginationResponse<ITodo>) =>
          typeof lastPage.currentPage === "number" && rows.length < countAll
            ? (lastPage.currentPage ?? 0) + 1
            : undefined,
      },
    );

  const mutationDelete = api.todo.destroy.useMutation({
    onSuccess: () => {
      setOpenNotification("Task was deleted");
      void refetch();
    },
  });

  const handleToggle = (value: string) => () => {
    const currentIndex = checked.indexOf(value);
    const newChecked = [...checked];

    if (currentIndex === -1) {
      newChecked.push(value);
    } else {
      newChecked.splice(currentIndex, 1);
    }

    setChecked(newChecked);
  };

  const handleDelete = (): void => {
    if (!selectedId) return;

    mutationDelete.mutate({ id: selectedId });
    setSelectedId(null);
  };

  useEffect(() => {
    if (data) {
      const dataRows: ITodo[] = data?.pages
        .map((page) => page.rows.map((row: ITodo) => row))
        .flat();
      const dataCountAll: number = data.pages[0]?.countAll ?? 0;
      setRows(dataRows);
      setCountAll(dataCountAll);
    }
  }, [data]);

  useEffect(() => {
    if (inView && hasNextPage) {
      void fetchNextPage();
    }
  }, [inView, hasNextPage, fetchNextPage]);

  useEffect(() => {
    void refetch();
  }, [router.query.slug, refetch]);

  console.log({ checked });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex w-full flex-col items-center justify-center">
        <Box
          component={Paper}
          elevation={4}
          className="relative w-full flex-grow p-4"
        >
          <Box className="mb-2 flex flex-col items-center md:flex-row md:justify-between">
            <Typography variant="h5" gutterBottom>
              Todo List
            </Typography>
          </Box>
          <div className="absolute right-6 top-2" ref={containerRef}>
            <Slide direction="right" in={checked.length > 0}>
              <Box>
                <IconButton onClick={() => void setChecked([])}>
                  <ClearAll />
                </IconButton>
                <UpdateMultiple
                  path="todo"
                  ids={checked}
                  handleRefresh={() => void refetch()}
                />
                <DeleteMultiple
                  path="todo"
                  ids={checked}
                  handleRefresh={() => void refetch()}
                />
              </Box>
            </Slide>
          </div>
          <Box className="flex flex-col items-center justify-between gap-4 md:flex-row">
            <SearchInput />
            <FormControl sx={{ m: 1, minWidth: 120 }} size="small">
              <InputLabel id="demo-select-small-label">Sort By</InputLabel>
              <Select
                labelId="demo-select-small-label"
                id="demo-select-small"
                value={sortBy}
                label="Sort By"
                onChange={handleChangeSortBy}
              >
                <MenuItem value={"title"}>Title</MenuItem>
                <MenuItem value={"description"}>Description</MenuItem>
                <MenuItem value={"entryDate"}>Date</MenuItem>
                <MenuItem value={"isCompleted"}>Completed</MenuItem>
              </Select>
            </FormControl>
          </Box>
          <Box
            component={Paper}
            square
            elevation={0}
            className="max-h-[750px] w-full flex-1 overflow-y-auto"
          >
            <List sx={{ width: "100%" }}>
              {rows.map((row: ITodo, index: number) => {
                const labelId = `checkbox-list-brand-${row.id}`;
                return (
                  <React.Fragment key={index}>
                    <ListItem
                      alignItems="flex-start"
                      /* secondaryAction={
                      <Checkbox
                        edge="end"
                        onChange={handleToggle(row.id)}
                        checked={checked.indexOf(row.id) !== -1}
                        tabIndex={-1}
                        disableRipple
                        inputProps={{ "aria-labelledby": labelId }}
                      />
                    } */
                      secondaryAction={
                        <IconButton
                          edge="end"
                          aria-label="delete"
                          onClick={() => void setSelectedId(row.id)}
                        >
                          <Delete />
                        </IconButton>
                      }
                      disablePadding
                    >
                      <ListItemIcon>
                        <Checkbox
                          edge="end"
                          onChange={handleToggle(row.id)}
                          checked={checked.indexOf(row.id) !== -1}
                          tabIndex={-1}
                          disableRipple
                          inputProps={{ "aria-labelledby": labelId }}
                        />
                      </ListItemIcon>
                      <ListItemButton
                        onClick={() =>
                          void router.push(
                            {
                              pathname,
                              query: { slug: ["v", row.id] },
                            },
                            `${pathname}/v/${row.id}`,
                          )
                        }
                      >
                        <ListItemText
                          primary={
                            <Typography
                              color="text.primary"
                              variant="subtitle2"
                              className={row.isCompleted ? "line-through" : ""}
                            >
                              {`${row.title} at ${convertDateOnly(
                                row.entryDate,
                              )}`}
                            </Typography>
                          }
                          secondary={
                            <React.Fragment>
                              <Typography
                                sx={{ display: "inline" }}
                                component="span"
                                variant="body2"
                                color="text.primary"
                                className={
                                  row.isCompleted
                                    ? "bg-green-500 line-through"
                                    : ""
                                }
                              >
                                {row.description}
                              </Typography>
                            </React.Fragment>
                          }
                        />
                      </ListItemButton>
                    </ListItem>
                    <Divider component="li" />
                  </React.Fragment>
                );
              })}
            </List>
            {isFetchingNextPage ? (
              <div className="loading">Loading...</div>
            ) : null}
            <div className="invisible" ref={ref}></div>
          </Box>
        </Box>
        <ButtonFloat
          handleClick={() =>
            void router.push(
              {
                pathname,
                query: { slug: ["f"] },
              },
              `${pathname}/f`,
            )
          }
        />
        {router.query.slug && (
          <ModalTransition
            open
            handleClose={router.back}
            maxWidth="sm"
            fullWidth
            scroll="paper"
          >
            <TodoForm slug={router.query.slug as FormSlugType} showIn="popup" />
          </ModalTransition>
        )}
        {typeof selectedId === "string" && (
          <ConfirmationDialog
            open={typeof selectedId === "string"}
            title="Delete Confirmation"
            message="Are you sure to delete this task?"
            onClose={() => setSelectedId(null)}
            onSubmit={handleDelete}
            confirmColor="error"
          />
        )}
      </main>
    </>
  );
};

export default Home;
Home.Layout = "Dashboard";
